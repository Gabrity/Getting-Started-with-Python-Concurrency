Process: an execution context of a running program
Process: a running instance of a computre program

A process has system resources, a memory section, security attributes, process state.

A thread is the smallest sequence of instructions that can be managed by the operating system. 
The running threads are piced up by real threads from the thread pool.


Thread lifecycle:
New => Ready => Running => Terminated
         <= Blocked <=

Each thread has its own register and stack space for performing its own calculation. This is independent.
But threads within a process share a common memory space and common resources such as opened files. The OS used scheduler randomly switches between threads.

Switching between threads in the same process is cheap, but switching to different process is expensive (context switch). 
This is why threading could be preferred over multiprocessing. But it is dangerous as well because of thread interference (two processes updating the same memory)

The solution: Thread synchronization
The first goal is to reduce shared memory as much as possible. To avoid interference, locking is used. One thread can lock a resource, which can only be unlocked 
by the same thread. If another thread tries to acquire that resource, it gets blocked. This can be done with using locks. Locks are only needed for writing the resource.

Other solution: semaphore - allows only a set of threads to access a shared resource, limiting their number.

GIL: Global Interpreter Lock
This reduces the number of threads to that can execute a certain code at the same time to one. In case of multithreading in reality what happens is that 
only one thread is executed at the same time, but it is switching around quickly. This way it is not the most efficient to use multithreading for cpu bound operations.
The solution is to use different interprater without GIL, like IronPython or to use multiprocessing instead. Multithreading is good for I/O operations.
